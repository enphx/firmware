#include "low_level/core0.h"
#include "low_level/io.h"
#include "robot.h"
#include <Arduino.h>

// NOTE: pet detection was being run with a kernel of [-1, 0, 1].

static const char *TAG = "main";

Robot robot;

void statusTask(void *arg) {
  for (;;) {
    gpio_set_level((gpio_num_t)4, HIGH);
    vTaskDelay(pdMS_TO_TICKS(1000));
    gpio_set_level((gpio_num_t)4, LOW);
    vTaskDelay(pdMS_TO_TICKS(1000));
  }
}

#define SCAN_HEIGHT 3.7
#define SCAN_RADIUS 5.5

void robotTask(void *arg) {

  ESP_LOGI(TAG, "started robot task");

  robot.setArmPosition(7.1, 14.5, 0, false);
  robot.setBaseSpeed(0);
  robot.setTapeFollowing(true);
  robot.releasePet();
  robot.delay(400);
  robot.flaccid();

  while (get_convolved_value(ADC_CH_IR_BEACON_R) < 1000) {
    robot.delay(1);
  }
  robot.setArmPosition(7.1, 14.5, 0, false);
  robot.setBaseSpeed(1.5);
  robot.resetDistanceTravelled();

  while (robot.getDistanceTravelled() <= 1.5) {
    robot.delay(1);
  }

  robot.setBaseSpeed(0.4);

  robot.armFollowTrajectory(scanOutisdeDoor, scanOutisdeDoorLength);
  robot.startScanning();
  robot.delay(100);
  robot.setScannerThreshold(200, false);
  while (robot.scannerThresholdTripped() == false) {
    robot.delay(1);
  }
  robot.stopScanning();
  robot.resetDistanceTravelled();
  robot.setBaseSpeed(0);
  robot.armMoveSmooth(3.5 + 3, 8 + 2.5, 10, 400);
  robot.grabPet();
  robot.delay(700);
  robot.resetDistanceTravelled();
  robot.setBaseSpeed(1.5);
  robot.armFollowTrajectory(pickupPetOne, pickupPetOneLength);

  while (robot.getDistanceTravelled() < 0.8) {
    robot.delay(1);
  }
  robot.armFollowTrajectory(scorePetOne, scorePetOneLength);
  robot.releasePet();
  robot.delay(200);
  robot.setArmPosition(8, 3, 70, false);
  robot.flaccid();
  while (robot.getDistanceTravelled() < 1.5) {
    robot.delay(1);
  }

  robot.delay(300);
  robot.startScanning();
  robot.delay(100);

  robot.setScannerThreshold(300, false);
  while (!robot.scannerThresholdTripped()) {
    robot.delay(1);
  }
  robot.setBaseSpeed(0.4);
  robot.setScannerThreshold(300, true);

  while (!robot.scannerThresholdTripped()) {
    robot.delay(1);
  }
  robot.resetDistanceTravelled();
  while (robot.getDistanceTravelled() < 0.04) {
    robot.delay(1);
  }

  robot.setBaseSpeed(0.5);
  robot.setScannerThreshold(300, false);
  while (!robot.scannerThresholdTripped()) {
    robot.delay(1);
  }
  robot.stopScanning();

  robot.setBaseSpeed(0);

  robot.armMoveSmooth(8 - 2, 3 + 6.5, 10, 300);
  robot.grabPet();
  robot.delay(800);
  robot.armMoveSmooth(6 + 3, 0, 10, 200);
  robot.setArmPosition(0, 0, 20, true);
  robot.armMoveSmooth(9 +1.3, 9 + 4, 50, 1000);
  robot.releasePet();
  robot.delay(300);
  robot.armMoveSmooth(9, 9, 50, 500);
  robot.delay(1000);
  robot.setArmPosition(8, 3, 60, false);
  robot.delay(200);
  robot.startScanning();
  robot.delay(800);
  robot.setBaseSpeed(1.5);
  robot.delay(200);
  robot.setScannerThreshold(300, false);
  while (robot.scannerThresholdTripped() == false) {
    robot.delay(1);
  }
  robot.setBaseSpeed(0);

  robot.armMoveSmooth(8 + 4, 3 + 9, 10, 500);
  robot.grabPet();
  robot.delay(300);
  robot.armFollowTrajectory(storePetThree, storePetThreeLength);
  robot.releasePet();

  for (;;) {
    robot.delay(1);
  }
}

void setup() {
  pinMode(4, OUTPUT);

  robot.init();
  ESP_LOGI(TAG, "robot initialized");
  xTaskCreatePinnedToCore(statusTask, "statusLed task", 4096, NULL, 3, NULL, 1);
  delay(100);
  xTaskCreatePinnedToCore(robotTask, "robot task", 8192, NULL, 1, NULL, 1);
}

void loop() {}
